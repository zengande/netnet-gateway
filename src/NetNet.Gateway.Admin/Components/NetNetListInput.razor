<div>
    <div class="row">
        <div class="col form-label mb-3">@(DisplayText ?? "Values")</div>
        <div class="col-auto">
            <Button Size="Size.ExtraSmall" Icon="fas fa-add" Text="添加项" OnClick="@OnAddClick" IsDisabled="_showTemporary"></Button>
        </div>
    </div>
    <div class="row g-3">
        @if (Items is not null && Items.Any())
        {
            var items = Items.ToList();
            for (var i = 0; i < items.Count; i++)
            {
                var index = i;
                <div class="row g-3 mt-0">
                    @if (ShowRowNumber)
                    {
                        <div class="col-auto d-flex align-items-center">
                            <div class="row-number">@(index + 1)</div>
                        </div>
                    }
                    <div class="col">
                        <input data-list-input-index="@index" required="required" class="form-control @(_invalidIndexSet.Contains(index) ? "is-invalid" : "")"
                               value="@items[i]" @onchange="@((e) => OnItemChange(index, e))"/>
                    </div>
                    <div class="col-auto d-flex justify-content-between align-items-center p-0">
                        <Button Size="Size.ExtraSmall" Icon="fas fa-remove" IsAsync="true" Color="Color.Danger"
                                OnClick="@(() => OnRemoveClick(index))">
                        </Button>
                    </div>
                </div>
            }
        }
        else if (ShowEmpty && !_showTemporary)
        {
            <Empty Text="无数据"/>
        }
        <Block Condition="@_showTemporary">
            <div class="row g-3 mt-0">
                @if (ShowRowNumber)
                {
                    <div class="col-auto d-flex align-items-center">
                        <div class="row-number temporary">@((Items?.Count() ?? 0) + 1)</div>
                    </div>
                }
                <div class="col">
                    <input required="required" class="form-control @(string.IsNullOrWhiteSpace(_temporaryValue) ? "is-invalid" : "")"
                           value="@_temporaryValue" @onchange="OnTemporaryValueChange"/>
                </div>
                <div class="col-auto d-flex justify-content-between align-items-center p-0">
                    <Button Size="Size.ExtraSmall" Icon="fas fa-save" OnClick="@OnAddSave" IsAsync="true"
                            Color="Color.Success">
                    </Button>
                    <Button Size="Size.ExtraSmall" Icon="fas fa-cancel" OnClick="@OnAddCancel" Color="Color.Warning"
                            style="margin-left: 4px">
                    </Button>
                </div>
            </div>
        </Block>
    </div>
</div>

@code {

    [Parameter]
    public IEnumerable<string>? Items { get; set; }

    [Parameter]
    public string? DisplayText { get; set; }

    /**
     * 是否显示空状态
     */
    [Parameter]
    public bool ShowEmpty { get; set; } = true;

    /**
     * 是否显示行号
     */
    public bool ShowRowNumber { get; set; } = true;

    [Parameter]
    public EventCallback<IEnumerable<string>> ItemsChanged { get; set; }

    private bool _showTemporary;
    private string? _temporaryValue;
    private HashSet<int> _invalidIndexSet = new();

    private void OnAddClick()
    {
        _showTemporary = true;
    }

    private void OnTemporaryValueChange(ChangeEventArgs obj)
    {
        _temporaryValue = obj.Value?.ToString();
    }

    private Task OnAddSave()
    {
        if (string.IsNullOrWhiteSpace(_temporaryValue)) return Task.CompletedTask;

        Items ??= Enumerable.Empty<string>();

        Items = Items.Append(_temporaryValue).ToList();

        _temporaryValue = null;
        _showTemporary = false;

        return ItemsChanged.InvokeAsync(Items);
    }

    private void OnAddCancel()
    {
        _temporaryValue = null;
        _showTemporary = false;
    }

    private Task OnRemoveClick(int index)
    {
        if (Items is null) return Task.CompletedTask;

        var temp = Items.ToList();
        temp.RemoveAt(index);

        Items = temp;
        _invalidIndexSet.Remove(index);

        return ItemsChanged.InvokeAsync(Items);
    }

    private void OnItemChange(int index, ChangeEventArgs e)
    {
        var currentValue = e.Value?.ToString();
        if (Items is null) return;

        if (string.IsNullOrWhiteSpace(currentValue))
        {
            _invalidIndexSet.Add(index);
            return;
        }

        _invalidIndexSet.Remove(index);

        var temp = new List<string>(Items.Count());
        var i = 0;
        foreach (var item in Items)
        {
            temp.Add(i == index ? currentValue : item);

            i++;
        }

        Items = temp;

        ItemsChanged.InvokeAsync(Items);
    }

}
